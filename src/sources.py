import numpy as np
import matplotlib.pyplot as plt
from scipy import signal

from dataclasses import dataclass, InitVar
from typing import Callable

@dataclass
class Source:
    dt: float
    t: np.ndarray

    omega_0: InitVar[float]
    signal: Callable[[float], float] = lambda x: 0*x

    M: int = 0.1
    A: float = 6
    Q: InitVar[float] = 0.0001
    rho: float = 1000

    def __post_init__(self, omega_0: float, Q: float):
        self.sphere(omega_0, Q)

        beta = omega_0 / np.tan(omega_0 * self.dt / 2)

        a = [1, 2 * (self.K - self.M * beta**2) / (self.M * beta**2 + self.R * beta + self.K), 1 - 2 * self.R * beta / (self.M * beta**2 + self.R * beta + self.K)]
        b = [beta / (self.M * beta**2 + self.R * beta + self.K), 0, - beta / (self.M * beta**2 + self.R * beta + self.K)]
        self.u = signal.lfilter(b, a, self.signal(self.t))
        self.q = self.rho * self.A / (dx * dy * dz) * self.u
        self.psi = 1 / (2 * self.dt) * signal.lfilter([1, 0, -1], [1], self.q)

    def sphere(self, omega_0, Q):
        self.R = omega_0 * self.M / Q
        self.K =  self.M * omega_0**2

def function(t, mu=5, sig = 1.5):
    omega_0 = 2 * np.pi * 1
    return np.sin(omega_0 * t) * 250e-6 * np.exp(-np.power(t - mu, 2.) / (2 * np.power(sig, 2.)))

if __name__ == "__main__":
    dt = 0.001
    dx, dy, dz = 0.5, 0.5, 0.5
    T = np.arange(0, 10, dt)

    omega_0 = 2 * np.pi * 50

    s = Source(dt, T, omega_0, signal=function)

    fig, ax = plt.subplots()
    ax.plot(s.t, s.signal(s.t), label=r"$F(t)$", color="crimson")
    ax.legend(loc="best")
    ax.set_title("Force applied to the sphere", fontsize=14)
    ax.set_xlabel(r"Time ($s$)", fontsize=11)
    ax.set_ylabel(r"Force ($N$)", fontsize=11)
    ax.set_xlim(T[0], T[-1])
    ax.grid(True)
    fig.set_tight_layout(True)

    fig, ax = plt.subplots()
    ax.plot(s.t, s.q, label=r"$q_n$", color="purple")
    ax.plot(s.t, s.psi, label=r"$\psi_n$", color="teal")
    ax.legend(loc="best")
    ax.set_title("Pressure generated by a pulsing sphere", fontsize=14)
    ax.set_xlabel(r"Time ($s$)", fontsize=11)
    ax.set_ylabel(r"Pressure ($Pa$)", fontsize=11)
    ax.set_xlim(T[0], T[-1])
    ax.grid(True)
    fig.set_tight_layout(True)
    plt.show()