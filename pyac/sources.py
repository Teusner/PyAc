import numpy as np
import matplotlib.pyplot as plt
from numpy.core.numeric import convolve
from scipy import signal, interpolate

from dataclasses import dataclass, InitVar
from typing import Callable

import scipy

from pyac.Acoustics import Module

@dataclass
class Source(Module):
    dt: float
    t: np.ndarray
    dx: float
    dy: float
    dz: float

    omega_0: InitVar[float]
    signal: Callable[[float], float] = lambda x: 0*x

    M: int = 0.1
    A: float = 6
    Q: InitVar[float] = 0.0001
    rho: float = 1000

    def __post_init__(self, omega_0: float, Q: float):
        self.sphere(omega_0, Q)

        beta = omega_0 / np.tan(omega_0 * self.dt / 2)

        a = np.array([1, 2 * (self.K - self.M * beta**2) / (self.M * beta**2 + self.R * beta + self.K), 1 - 2 * self.R * beta / (self.M * beta**2 + self.R * beta + self.K)])
        b = np.array([beta / (self.M * beta**2 + self.R * beta + self.K), 0, - beta / (self.M * beta**2 + self.R * beta + self.K)])
        self.u = signal.lfilter(b, a, self.signal(self.t))
        self.q = self.rho * self.A / (self.dx * self.dy * self.dz) * self.u
        self.psi = 1 / (2 * self.dt) * signal.lfilter([1, 0, -1], [1], self.q)

        self.f = interpolate.interp1d(self.t, self.psi)

    def sphere(self, omega_0, Q):
        self.R = omega_0 * self.M / Q
        self.K =  self.M * omega_0**2

    def __getitem__(self, key):
        return self.f(key)

def function(t, mu=5, sig = 1.5):
    omega_0 = 2 * np.pi * 50
    return np.sin(omega_0 * t) * np.exp(-np.power(t - mu, 2.) / (2 * np.power(sig, 2.)))

def function2(t, n):
    sig = np.ones((t.shape))
    sig[:n] = 0
    sig[t.size - n:] = 0
    filt = signal.windows.hann(n)
    return signal.convolve(sig, filt, mode='same') / np.sum(filt) * np.sin(2 * np.pi * 50 * t)


if __name__ == "__main__":
    dt = 0.001
    dx, dy, dz = 0.5, 0.5, 0.5
    T = np.arange(0, 10, dt)

    omega_0 = 2 * np.pi * 50

    s = Source(0, 0, T, dt, dx, dy, dz, omega_0, signal=function)

    fig, ax = plt.subplots()
    ax.plot(s.t, s.signal(s.t), label=r"$F(t)$", color="crimson")
    ax.legend(loc="best")
    ax.set_title("Force applied to the sphere", fontsize=14)
    ax.set_xlabel(r"Time ($s$)", fontsize=11)
    ax.set_ylabel(r"Force ($N$)", fontsize=11)
    ax.set_xlim(T[0], T[-1])
    ax.grid(True)
    fig.set_tight_layout(True)

    fig, ax = plt.subplots()
    ax.plot(s.t, s.q, label=r"$q_n$", color="purple")
    ax.plot(s.t, s.psi, label=r"$\psi_n$", color="teal")
    ax.legend(loc="best")
    ax.set_title("Pressure generated by a pulsing sphere", fontsize=14)
    ax.set_xlabel(r"Time ($s$)", fontsize=11)
    ax.set_ylabel(r"Pressure ($Pa$)", fontsize=11)
    ax.set_xlim(T[0], T[-1])
    ax.grid(True)
    fig.set_tight_layout(True)
    plt.show()